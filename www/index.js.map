{
  "version": 3,
  "sources": ["../source/strings.json", "../source/index.js"],
  "sourcesContent": ["{\n  \"deaths\": [\n    \"death\",\n    \"life\",\n    \"sugar\",\n    \"ur mom\",\n    \"ur dad\",\n    \"rusty ford fiesta\",\n    \"capitalism\",\n    \"queer\",\n    \"pasta\",\n    \"carbs\",\n    \"facebook\",\n    \"cheese\",\n    \"plastic\",\n    \"catgirl\",\n    \"barbie\",\n    \"frequent\",\n    \"pesticide\",\n    \"steve\"\n  ],\n\n  \"destroyers\":[\n    \"destroyer\",\n    \"hugger\",\n    \"kisser\",\n    \"puncher\",\n    \"crusher\",\n    \"consumer\",\n    \"frequenter\",\n    \"taker\",\n    \"licker\",\n    \"miner\",\n    \"crafter\",\n    \"digger\",\n    \"investigator\",\n    \"perpetrator\"\n  ],\n\n  \"worlds\":[\n    \"worlds\",\n    \"women\",\n    \"men\",\n    \"cuties\",\n    \"metabolisms\",\n    \"will to live\",\n    \"ur mom\",\n    \"ur dad\",\n    \"hope\",\n    \"microwave meals\",\n    \"cheese\",\n    \"faces\",\n    \"trees\",\n    \"capitalism\",\n    \"plastic\",\n    \"blocks\",\n    \"crafts\",\n    \"mines\",\n    \"holes\",\n    \"crimes\",\n    \"dance\"\n  ],\n\n  \"lewd\":{\n    \"deaths\":[\n      \"twink\",\n      \"cock\",\n      \"tentacle dildo\"\n    ],\n\n    \"destroyers\":[\n      \"fucker\",\n      \"fister\"\n    ],\n    \n    \"worlds\":[\n      \"asses\",\n      \"cocks\",\n      \"twinks\",\n      \"drugs\",\n      \"brothels\"\n    ]\n  }\n}\n", "/*\n * Copyright 2024 Allie Law <allie@cloverleaf.app>\n * SPDX-License-Identifier: GPL-3.0-or-later\n */\nimport './styles.sass'\nimport strings from './strings.json' assert {type: 'json'}\n\n// if true, lewd results can be generated\nlet lewd = false\n// if true, only lewd parts are used\nlet lewdOnly = false\n\n// Returns a random element from an array\nconst sample = function (array) {\n  return array[Math.floor(Math.random() * array.length)]\n}\n\nfunction changeText (text) {\n  document.getElementById('answer').textContent = text\n}\n\nlet lastDeath = '' // Used to store the last chosen death so we don't immediately repeat it\nlet lastDestroyer = ''\nlet lastWorld = ''\n\nfunction gen () {\n  let possibleDeaths = strings.deaths\n  let possibleDestroyers = strings.destroyers\n  let possibleWorlds = strings.worlds\n\n  if (lewdOnly) {\n    possibleDeaths = strings.lewd.deaths\n    possibleDestroyers = strings.lewd.destroyers\n    possibleWorlds = strings.lewd.worlds\n  } else\n\n    if (lewd) {\n      possibleDeaths = strings.deaths.concat(strings.lewd.deaths)\n      possibleDestroyers = strings.destroyers.concat(strings.lewd.destroyers)\n      possibleWorlds = strings.worlds.concat(strings.lewd.worlds)\n    }\n\n  // Select random parts for each but keep choosing new ones\n  // till it's not the same as the last used\n  let newDeath = sample(possibleDeaths)\n  while (newDeath === lastDeath) {\n    newDeath = sample(possibleDeaths)\n  }\n  lastDeath = newDeath\n\n  let newDestroyer = sample(possibleDestroyers)\n  while (newDestroyer === lastDestroyer) {\n    newDestroyer = sample(possibleDestroyers)\n  }\n  lastDestroyer = newDestroyer\n\n  let newWorld = sample(possibleWorlds)\n\n  // Don't use last used world\n  while (newWorld === lastWorld) {\n    newWorld = sample(possibleWorlds)\n  }\n  lastWorld = newWorld\n\n  return `I am become ${newDeath}, ${newDestroyer} of ${newWorld}`\n}\n\n/* Generate a share link for the user's Mastodon domain */\nfunction MastodonShare (text) {\n  // Make text safe to be in a url\n  text = encodeURIComponent(text)\n\n  // Get the Mastodon domain\n  const domain = window.prompt('Enter your Mastodon domain', 'mastodon.social')\n\n  if (domain === '' || domain === null) { return }\n\n  // Build the URL\n  const url = `https://${domain}/share?text=${text}`\n\n  // Open a window on the share page\n  window.open(url, '_blank')\n}\n\n// on load\nwindow.addEventListener('load', function () {\n  // Add functionality to lewd toggle\n  document.getElementById('lewd-toggle').addEventListener('change', () => {\n    // Invert lewd\n    lewd = !lewd\n    // Make a new thing\n    changeText(gen())\n  })\n\n  // Add functionality to lewd only toggle\n  document.getElementById('lewd-only-toggle').addEventListener('change', () => {\n    // Invert lewd_only\n    lewdOnly = !lewdOnly\n\n    if (lewdOnly) {\n      // if lewd_only, must be lewd\n      lewd = true\n      document.getElementById('lewd-toggle').checked = true\n    }\n\n    // Make a new quote\n    changeText(gen())\n  })\n\n  // Add functionality to mastodon share button\n  this.document.getElementById('share').addEventListener('click', () => {\n    // Share the generated quote with a link to this site\n    const shareText = `\"${document.getElementById('answer').textContent}\"\\n\\nhttps://childishgiant.github.io/iambecome`\n    MastodonShare(shareText)\n  })\n\n  // Add onclick for quote\n  document.getElementById('answer').addEventListener('click', () => {\n    changeText(gen())\n  })\n\n  // Make sure the inputs are in-step with the values\n  document.getElementById('lewd-toggle').checked = lewd\n  document.getElementById('lewd-only-toggle').checked = lewdOnly\n\n  // Generate one on load\n  changeText(gen())\n})\n"],
  "mappings": "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",
  "names": ["strings_default", "lewd", "lewdOnly", "sample", "array", "changeText", "text", "lastDeath", "lastDestroyer", "lastWorld", "gen", "possibleDeaths", "strings_default", "possibleDestroyers", "possibleWorlds", "newDeath", "newDestroyer", "newWorld", "MastodonShare", "domain", "url", "shareText"]
}
